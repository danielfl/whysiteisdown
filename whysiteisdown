#!/bin/bash

#Created by: Daniel Ferreira de Lima 
#Last Release: 0.1 Sáb Jun 11 13:14:25 BRT 2016
#Changelog:
#Description: Take a look and check why the website is down 
#github: @danielfl
#not company property, made in my free time
#VIM<3 

TODAY=$(date +"%s") 

#source worldtlds.sh 
#echo ${WHOISSERVER[${1##*.}]}

[ $# -eq 0  ] &&  echo ERRO - Parametros não encontrados && exit 

site=$1
[ "x${1:0:7}" == "xhttp://"  ] && site=${1:7}
[ "x${1:0:8}" == "xhttps://"  ] && site=${1:8}
site=${site///*/}

[[ "$site" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$  ]] && echo ERRO - IP não aceito && exit 

echo $site|grep ":" 2>/dev/null >/dev/null && echo "ERRO - HOST:PORTA não aceita" && exit

function echobt { 
    text=$1
    shift
    $* | while read line ;do echo "$text" $line ;done
}

function lhttptraceroute { 
    site=$1 
    http_code=300 
    n=0 
    timeout=15
    echo -n "Start tracing $1 "; 
    echo '['$(host  $site|egrep -o "([0-9]{1,3}.){4}$")']' 
    if ! [ ${site: -1} = "/" ] ;then
        site=$site"/"
    fi
    while [[ ${http_code} =~ ^3[0-9]{2}$ ]] ; do 

        ssl="   "
        [[ "${site:0:5}" = "https" ]] && ssl="ssl"

        #awfully necessary headers
        http_code=`curl -m $timeout \
            -H 'Accept-Language: en-US,en;q=0.8' \
            -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8' \
            -H 'Referer: http://google.com/search?q=IT' --cookie key='20519d5b' \
            -A 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36'  $site -w %{http_code} -o /dev/null -s `

        [ "$http_code" = "000" ] && http_code=404
        echo "[$n] [$ssl] [$1] -- [$site] ... code $http_code" 

        #------------------------

        actualsite=$site
        site=`curl -m $timeout \
            -H 'Accept-Language: en-US,en;q=0.8' \
            -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8' \
            -H 'Referer: http://google.com/search?q=IT' --cookie key='20519d5b' \
            -A 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36' \
            -Iv $site 2>&1 |tr -d '\r'| sed -rn 's/^[lL]oc(.*) (http.?:\/\/)?([.0-9A-Za-z=&%$#_-?/]+)$/\2\3/p'`

        if [[ "$actualsite" = "$site" ]] || [[  $n -ge 7 ]] ;then
            echo "redirect loop?"
            break
        fi

        if [[ $site =~ ^(\.|\/) ]]; then 
            if [[ ${site:0:2} = "./" ]] ;then
                #./index -> site/foo/index
                site=$actualsite${site:2}
            else
                #/index -> site/index
                site=$actualsite${site:1}
            fi 
        fi
        let $((n++))
    done 
}

function checkDomain { 
   echo -ne  "[$1] - "

   DOMAIN=$1

   if [ ${DOMAIN##*.} != "br"  ]
   then
       echo ERRO - Dominios fora do brasil não disponiveis
       return 1
   fi 

   EXPIRATION_DATE=$(whois $DOMAIN | grep -i expire | cut -d: -f2)
   ret=$?
   date +%s -d $EXPIRATION_DATE 2>/dev/null >/dev/null 

   if [ $? -ne 0 ]
   then
       echo ERRO - data inválida 
       return 1 
   fi

   if [ $ret -eq 0 ]
   then 
       let DATEDIFF=(`date +%s -d $EXPIRATION_DATE`-$TODAY)/86400 

       if [ $DATEDIFF -le 0 ]
       then
          content="O domínio $cert está expirado a ${DATEDIFF:1} dias"
          echo "ERRO - $content"
          situacao="está expirado"
          mailbody="$mailbody\n\n$content"

       else
         if [ $DATEDIFF -le 30 ] 
         then
           content="O domínio $cert vai expirar em $DATEDIFF dias"  
           echo "OK - $content"
           situacao="está próximo de expirar"
           mailbody="$mailbody\n\n$content"

         else
           echo "OK - O domínio está ok - Ainda faltam $DATEDIFF dias para expirar"  
         fi
       fi
   else
       echo "ERRO - Nao foi possível obter informacoes"
   fi 
}

function curlit { 
   echo -ne  "[$1] - "
 
   curl -H 'Accept-Language: en-US,en;q=0.8' \
            -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8' \
            -H 'Referer: http://google.com/search?q=IT' --cookie key='20519d5b' \
            -A 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like
            Gecko) Chrome/41.0.2227.0 Safari/537.36' -s -o "/dev/null" $1 

    ret=$?
    
   [ $ret -eq 0 ] && echo "OK - consegui acessar o site"
   [ $ret -eq 6 ] && echo "ERRO - não consegui resolver o endereço do site"
   [ $ret -eq 7 ] && echo "ERRO - não consegui conectar ao site" 


}

function takephoto { 
    arq=`mktemp`
    site=$1
    echo -ne  "[$1] - "

    echo -ne "var page = require('webpage').create(); 

    page.open('http://$site', function() { 
          page.render('${site}.png');
          phantom.exit(); 
    });" >> $arq.js 

    phantomjs $arq.js 2>/dev/null >/dev/null


    if [ $? -eq 0 ] && [ -e ${site}.png ]
    then
        if [  $(stat -c%s ${site}.png) -lt 1024 ] #filesize <1k
        then
            echo ERRO - não consegui tirar foto 
            rm ${site}.png

        else
            echo OK - foto tirada
            timeout 30s xdg-open ${site}.png
            rm ${site}.png
        fi
    else
        echo ERRO - não consegui tirar foto 
    fi 

    rm $arq $arq.js 
}

function pingcheck {
   echo -ne  "[$1] - "

    ping -q -c3 $1 2>/dev/null >/dev/null

    ret=$?
     
    if [ $ret -eq 0 ]
    then
        echo "OK - ping OK"
    else
        echo "ERRO - não consegui pingar o site "
    fi 


    return $ret
}

function checkCert {
  cert=$1
  echo -ne  "[$1] - " 

  DOMAIN=$(echo $cert | cut -d: -f1)
  echo | timeout 10s openssl s_client -connect "$cert:443"  2>/dev/null | timeout 10s openssl x509 -noout -enddate &>/dev/null 
  if [ $? -eq 0 ]
  then 
     ENDDATE=$(echo|timeout 15s openssl s_client -connect "$cert:443" 2>/dev/null|date --date="`timeout 15s openssl x509 -noout -enddate|cut -d= -f2 `" +'%s') 2>/dev/null 
     if [ $? -eq 0 ]
     then 
         let DATEDIFF=($ENDDATE-$TODAY)/86400 
         if [ $DATEDIFF -le 0 ]
         then
            #double check
            if true |timeout 10s openssl s_client -connect "$cert:443" 2>/dev/null | timeout 10s openssl x509 -noout -checkend 0; then
              echo "OK - certificado ok. $DATEDIFF dias para expirar"  
            else
              echo "ERRO - certificado está expirado a ${DATEDIFF:1} dias"
            fi 
         else
           if [ $DATEDIFF -le 30 ]
           then
             echo "OK - Certificado $cert vai expirar em $DATEDIFF dias"  
           else
             echo "OK - Certificado ok. $DATEDIFF dias para expirar"  
           fi
         fi 
     else
         echo "ERRO - não possui certificado SSL"
     fi 
  else 
     echo "ERRO - não possui certificado SSL"

  fi
}

function checkRedirectLoop { 
  echo  "[$1] - Checando por redirect loops:" 
  echobt "[$1] -- " lhttptraceroute $1
}

function messaround {

    echo
    echo Messing around..
    newdomain=${1#*.} 

    curlit $newdomain
    curlit https://$1 

    checkRedirectLoop $newdomain
    checkRedirectLoop https://$1 

    echobt "[$1] -- " host $1 |head -1
    echobt "[$newdomain] -- " host $newdomain | head -1

}

function amidown { 

    host $1 >/dev/null 2>/dev/null
    if [ $? -ne 0 ]
    then 
    echo -e "[$1] - ERRO - Seu DNS está bem configurado?"
    fi 

    pingcheck $1 
    ret=$?

    if [ $? -ne 0 ]
    then
        echo "ERRO - Sua conexão a internet está funcionando?" 
    fi 
}

function scantrying { 
    text="[$1] -- "

    echo "[$1] --  Verificando firewall .."
    nmap -p80,443 $1 | grep "^PORT" -A2 | while read line ;do echo "$text" $line ;done 
}

function nsrecords {
    nslook=`nslookup -query=ns $1 2>/dev/null|grep origin`
    ret=$?
    echo -e "[$1] - `echo $nslook | tr -d ' '`" 

    if [ $ret -ne 0 ]
    then
        echo "ERRO - Não encontrei o NS server"
    fi 
}

function abtest { 
    echo -ne "[$1] - " 
    ms=`ab -i -n 1 -c 1 $1/ 2>/dev/null| grep "Time per request" | head -1| egrep -o "([0-9]{1,4}.){2}"`

    if [ "x$ms" = "x" ]
    then
        echo "ERRO - Não foi possível testar o acesso"
    else
        echo OK - Resposta $ms ms 
    fi 
}

echo -ne "[$1] -  IP: " 
echo $(host $1|egrep -o "([0-9]{1,3}.){4}$") 

[ $? -ne 0 ] && echo ERRO - Não consegui obter o IP 


amidown www.google.com #reliable and stable website here

scantrying $site
nsrecords $site
checkDomain $site
checkCert $site
curlit $site
abtest $site
pingcheck $site 
checkRedirectLoop $site
takephoto $site 
#messaround $site


